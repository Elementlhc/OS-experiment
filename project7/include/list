#ifndef __LAOMD__LIST_H_
#define __LAOMD__LIST_H_
#include <algorithm>
#include <iterator>
#include <functional>

namespace laomd {
	template <typename T>
	struct ListNode {
		using value_type = T;
		using self_type = ListNode;

		value_type _val;
		self_type* prev;
		self_type* next;
		ListNode(const value_type& val) 
		    : _val(val), prev(nullptr), next(nullptr) {} 
	};

	template <typename T>
	class ListIterator {
	public:
		using value_type = T;
		using link_type = ListNode<T>*;
		using self_type = ListIterator;
		using difference_type = ptrdiff_t;
		
	    explicit ListIterator(link_type ptr = nullptr) : _node(ptr) {}
	    explicit operator link_type () const {
		    return _node;
		}
	    bool operator==(const self_type& other) const {
	    	return _node == other._node;
		}
		bool operator!=(const self_type& other) const {
			return !(*this == other);
		}
		self_type operator++() {
			_node = _node->next;
	    	return *this;
		}
		self_type operator++(int) {
			self_type tmp = *this;
			_node = _node->next;
			return tmp;
		}
		self_type operator--() {
			_node = _node->prev;
			return *this;
		}
		self_type operator--(int) {
			self_type tmp = *this;
			_node = _node->prev;
			return tmp;
		}
		value_type& operator*() const {
			return _node->_val;
		}
	
		link_type operator->() const {
		    return _node;
		}
	private: 
	    link_type _node;
	};

	template <typename T>
	class List {
	public:
		using value_type = T;
		using size_type = size_t;
		using pointer = T*;
		using reference = T&;
		using const_reference = const T&;
		using iterator = ListIterator<T>;
		using link_type = ListNode<T>*;
		using self_type = List;
		
	//	constructors
		List() {
			init();
		}
		explicit List(size_type n) : List(n, value_type()){}
		List(size_type n, const value_type& val) : List() {
			_fill(n, val);
		}
		template <typename InputIterator>
		List(InputIterator first, InputIterator last) : List() {
			_fill(first, last);
		}
		
		List(const self_type& other) : List() {
			*this = other;
		}

	//	destructor
		~List() {
			clear();
			delete _head;
		}
	//	operator=
		self_type& operator=(const self_type& other) {
			if (this != &other) {
				assign(other.begin(), other.end());
			}
			return *this;
		}
		self_type& operator=(self_type&& other) {
			if (this != &other) {
				clear();
				swap(other);
			}
			return *this;
		}
		
	//	iterators
		iterator begin() {
			return iterator(_head->next);
		}
		iterator begin() const {
	        return iterator(_head->next);
		}
		iterator end() {
			return iterator(_head);
		}
		iterator end() const {
		    return iterator(_head);
		}
	//	capacity
		size_type size() const {
	        return laomd::distance(begin(), end());
		}
		bool empty() const {
	        return _head->next == _head;
		}
		size_type max_size() const {
		    return size_type(-1);
		}
	//	element access
		reference front() {
			return *begin();
		}
		const_reference front() const {
		    return *begin();
		}
		reference back() {
			iterator tmp = end();
			--tmp;
			return *tmp;
		}
		const_reference back() const {
		    iterator tmp = end();
			--tmp;
			return *tmp;
		}
	//	modifiers
		void assign(size_type n, const value_type& val) {
			iterator first = begin(), last = end();
			while (n && first != last) {
				*first = val;
				++first;
				--n;
			}
			if (n) {
				insert(end(), n, val);
			}
			else {
				erase(first, last);
			}
		}
		
		template<typename InputIterator>
		void assign(InputIterator first, InputIterator last) {
			iterator cur = begin(), myend = end();
			while (cur != myend && first != last) {
				*cur = *first;
				++first;
				++cur;
			}
			if (first != last) {
				insert(end(), first, last);
			}
			else {
				erase(cur, myend);
			}		
		}
		void push_front(const value_type& val) {
			insert(begin(), val);
		}
		void push_back(const value_type& val) {
			insert(end(), size_type(1), val);
		}
		void pop_front() {
			erase(begin());
		}
		void pop_back() {
			iterator tmp = end();
			--tmp;
			erase(tmp);
		}
		void insert(iterator position, const value_type& val) {
			insert(position, size_type(1), val);
		}
		void insert(iterator position, size_type n, const value_type& val) {
			self_type tmp(n, val);
		  	splice(position, tmp);
		}
		template <typename InputIterator>
		void insert(iterator position, InputIterator first, InputIterator last) {
			self_type tmp(first, last);
		  	splice(position, tmp);
		}
		iterator erase(iterator position) {
			if (position != end()) {
				link_type tmp(position);
				position->prev->next = position->next;
				position->next->prev = position->prev;
				++position;
				delete tmp;
			}
			return position;
		}
		iterator erase(iterator first, iterator last) {
			while (first != last)
		        first = erase(first);
			return last;
		}
		void swap(self_type& other) {
			swap(_head, other._head);
		}
		void resize(size_type n, const value_type& val = value_type()) {
			size_type length = size();
			if (n > length) {
				insert(end(), n - length, val);
			}
			else {
			    iterator cur;
			    if (n > length / 2) {
			    	cur = end();
			    	advance(cur, n - length);
				}
				else {
					cur = begin();
					advance(cur, n);
				}
				erase(cur, end());
			}
		}
		void clear() {
			erase(begin(), end());
		}
	//	operations
		void splice(iterator position, self_type& x) {
			splice(position, x, x.begin(), x.end());
		}
		void splice(iterator position, self_type& x, iterator i) {
			splice(position, x, i, x.end());
		}
		void splice(iterator position, self_type& x, iterator first, iterator last) {
			if (first != last) {
				link_type prev = position->prev;
				link_type tmp = first->prev;
				prev->next = link_type(first);
				first->prev = prev;
				last->prev->next = link_type(position);
				position->prev = last->prev;
				tmp->next = link_type(last);
				last->prev = tmp;
			}
		}
		void remove(const value_type& val) {
			remove_if([&](const value_type& ele) {
				return ele == val;
			});
		}
		template <typename Predicate>
		void remove_if(Predicate pred) {
			iterator cur = begin();
			while(cur != end()) {
				if (pred(*cur)) {
					cur = erase(cur);
				}
				else {
					++cur;
				}
			}
		}
		template <typename BinaryPredicate = equal_to<value_type>>
		void unique(BinaryPredicate binary_pred = BinaryPredicate()) {
			iterator cur = begin();
			iterator first = cur;
			++cur;
			while(cur != end()) {
				if (*cur == *first) {
					cur = erase(cur);
				}
				else {
					first = cur;
					++cur;
				}
			}
		}
		/*void merge(self_type& x) {
			merge(x, less<value_type>());
		}
		template <typename Compare>
		void merge(self_type& x, Compare comp) {
			iterator first1 = begin(), last1 = end();
			iterator first2 = x.begin(), last2 = x.end();
			link_type cur = _head, tmp;
			while(first1 != last1 && first2 != last2) {
	//			link_type tmp(comp(*first1, *first2) ? first1++ : first2++);
				if (comp(*first1, *first2)) {
					tmp = link_type(first1);
					++first1;
				}
				else {
					tmp = link_type(first2);
					++first2;
				}
				cur->next = tmp;
				tmp->prev = cur;
				cur = cur->next;
			}
			if (first2 != last2) {
				cur->next = link_type(first2);
				first2->prev = cur;
				cur = last2->prev;
			}
			cur->next = _head;
			_head->prev = cur; 
			x._head->next = x._head->prev = x._head;
		}*/
		void reverse() {
			link_type cur = _head;
			do {
				swap(cur->next, cur->prev);
				cur = cur->prev;
			}while(cur != _head);
		}
		/*template <typename Compare = less<value_type>>
		void sort(Compare comp = Compare()) {
			
		}*/
	protected:
		link_type getNode(const value_type& val = value_type()) {
			return new ListNode<value_type>(val);
		}
		void init() {
			_head = getNode();
			_head->next = _head->prev = _head;
		} 
		void _fill(size_type n, const value_type& val) {
			link_type cur = _head;
			while(n--) {
				cur->next = getNode(val);
				cur->next->prev = cur;
				cur = cur->next;
			}
			cur->next = _head;
			_head->prev = cur;
		}
		template <typename InputIterator>
		void _fill(InputIterator first, InputIterator last) {
			link_type cur = _head;
			while(first != last) {
				cur->next = getNode(*first);
				cur->next->prev = cur;
				cur = cur->next;
				++first;
			}
			cur->next = _head;
			_head->prev = cur;
		}
	private:
		link_type _head;
	}; 
} // laomd
#endif